#!/usr/bin/env python3

import json
import locale
import sys
import os

from reports import generate as generate_report
from emails import generate as generate_email
from emails import send

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def get_most_popular_year(annual_data):
  most_popular_year = {"car_count" : 0, "year" : 0, "sum_sales":0}
  for year, year_data in annual_data.items():
    if year_data["car_count"] > most_popular_year["car_count"]:
      most_popular_year["car_count"] = year_data["car_count"]
      most_popular_year["year"] = year
      most_popular_year["sum_sales"] = year_data["sum_sales"]
  return most_popular_year

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  annual_data = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item

    # TODO: also handle most popular car_year
    car_year = item["car"]["car_year"]
    if car_year not in annual_data:
      annual_data[car_year] = {"car_count": 0, "sum_sales": 0}
    annual_data[car_year]["car_count"] += 1
    annual_data[car_year]["sum_sales"] += item["total_sales"]

  annual_data = get_most_popular_year(annual_data)

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(
      annual_data["year"], annual_data["sum_sales"])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)

  # TODO: turn this into a PDF report
  out_file = "/tmp/cars.pdf"
  title = "Sales summary for last month"
  info = "<br/>".join(summary)
  table_data = cars_dict_to_table(data)

  report = generate_report(filename=out_file, title=title, additional_info=info, table_data=table_data)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  recipient = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)
  attachment_path = "/tmp/cars.pdf"
  email = generate_email(sender, recipient, subject, body, attachment_path)
  send(email)

if __name__ == "__main__":
  main(sys.argv)
